package com.example.domain.value;

import java.util.Objects;
import java.util.regex.Pattern;

// CODE GENERATED BY IA
public record ISBN(String value) {
    private static final Pattern ISBN_10_PATTERN = Pattern.compile("^\\d{9}[\\dX]$");
    private static final Pattern ISBN_13_PATTERN = Pattern.compile("^\\d{13}$");

    public ISBN(String value) {
        Objects.requireNonNull(value, "ISBN cannot be null");

        String normalized = value.replaceAll("[-\\s]", ""); // Remove dashes & spaces

        if (!isValidISBN(normalized)) {
            throw new IllegalArgumentException("Invalid ISBN format: " + value);
        }

        this.value = normalized;
    }

    private boolean isValidISBN(String isbn) {
        if (ISBN_10_PATTERN.matcher(isbn).matches()) {
            return isValidISBN10(isbn);
        } else if (ISBN_13_PATTERN.matcher(isbn).matches()) {
            return isValidISBN13(isbn);
        }
        return false;
    }

    private boolean isValidISBN10(String isbn) {
        int sum = 0;
        for (int i = 0; i < 9; i++) {
            sum += (isbn.charAt(i) - '0') * (10 - i);
        }
        char lastChar = isbn.charAt(9);
        sum += (lastChar == 'X') ? 10 : (lastChar - '0');

        return sum % 11 == 0;
    }

    private boolean isValidISBN13(String isbn) {
        int sum = 0;
        for (int i = 0; i < 12; i++) {
            int digit = isbn.charAt(i) - '0';
            sum += (i % 2 == 0) ? digit : digit * 3;
        }
        int checksum = (10 - (sum % 10)) % 10;
        return checksum == (isbn.charAt(12) - '0');
    }

    /**
     * Formats the ISBN with dashes.
     * - ISBN-10: X-XXXX-XXXXX-X
     * - ISBN-13: XXX-X-XX-XXXXXX-X
     */
    public String getFormatted() {
        if (value.length() == 10) {
            return String.format("%s-%s-%s-%s",
                    value.charAt(0),
                    value.substring(1, 4),
                    value.substring(4, 9),
                    value.substring(9));
        } else if (value.length() == 13) {
            return String.format("%s-%s-%s-%s-%s",
                    value.substring(0, 3),
                    value.charAt(3),
                    value.substring(4, 6),
                    value.substring(6, 12),
                    value.substring(12));
        }
        return value;
    }

    @Override
    public String toString() {
        return getFormatted();
    }
}
